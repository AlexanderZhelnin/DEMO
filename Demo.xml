<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Demo</name>
    </assembly>
    <members>
        <member name="T:Demo.BookAVG">
            Фоновый процесс расчёта среднего колличества отзывов 
        </member>
        <member name="M:Demo.BookAVG.#ctor(Microsoft.Extensions.Logging.ILogger{Demo.BookAVG},Demo.Model.DemoContext)">
            <summary>
            Конструктор
            </summary>    
            <param name="logger"></param>
            <param name="ctx">контекст базы данных</param>
        </member>
        <member name="M:Demo.BookAVG.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Выполнение фонового процесса
            </summary>
            <param name="stoppingToken">токен завершения</param>
            <returns></returns>
        </member>
        <member name="T:Demo.TCPServer">
            Сервер TCP 
        </member>
        <member name="M:Demo.TCPServer.#ctor(Microsoft.Extensions.Logging.ILogger{Demo.TCPServer})">
            <summary>
            Конструктор
            </summary>    
            <param name="logger"></param>    
        </member>
        <member name="M:Demo.TCPServer.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Выполнение фонового процесса
            </summary>
            <param name="stoppingToken"></param>    
        </member>
        <member name="M:Demo.Client.DemoClient.GetAllAsync">
            <summary>Получение всех авторов</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetAllAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Получение всех авторов</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.CreateAsync(Demo.Client.Author)">
            <summary>Создание нового автора</summary>
            <param name="body">новый автор</param>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.CreateAsync(Demo.Client.Author,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Создание нового автора</summary>
            <param name="body">новый автор</param>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.UpdateAsync(Demo.Client.Author)">
            <summary>Изменение автора</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.UpdateAsync(Demo.Client.Author,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Изменение автора</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetByIdAsync(System.Int32)">
            <summary>Получить автора по уникальному идентификатору</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Получить автора по уникальному идентификатору</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.DeleteAsync(System.Int32)">
            <summary>Удаление автора</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.DeleteAsync(System.Int32,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Удаление автора</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetBookAsync(System.Int32,System.String)">
            <summary>Получение книг по уникальному идентификатору и названию</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetBookAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Получение книг по уникальному идентификатору и названию</summary>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetChangesAsync(System.String)">
            <summary>Метод чтения реализующий паттерн LongPolling</summary>
            <param name="marker">маркер после которого происходит чтение данных из очереди</param>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Demo.Client.DemoClient.GetChangesAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Метод чтения реализующий паттерн LongPolling</summary>
            <param name="marker">маркер после которого происходит чтение данных из очереди</param>
            <returns>Success</returns>
            <exception cref="T:Demo.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="T:Demo.Client.Author">
            <summary>Автор</summary>
        </member>
        <member name="P:Demo.Client.Author.Id">
            <summary>Уникальный идентификатор</summary>
        </member>
        <member name="P:Demo.Client.Author.Name">
            <summary>Имя автора</summary>
        </member>
        <member name="P:Demo.Client.Author.Books">
            <summary>Книги автора</summary>
        </member>
        <member name="T:Demo.Client.AuthorLongPollingValue">
            <summary>Значение очереди</summary>
        </member>
        <member name="P:Demo.Client.AuthorLongPollingValue.Marker">
            <summary>Маркер по котором считываем новые значения</summary>
        </member>
        <member name="T:Demo.Client.StatusEnum">
            <summary>Статус книги</summary>
        </member>
        <member name="T:Demo.Configurations.DB.DBConfigurationContext">
            Контекст базы данных для конфигурации 
        </member>
        <member name="T:Demo.Configurations.DB.DBConfigurationExtantions">
            Для удобной регистрации 
        </member>
        <member name="F:Demo.Configurations.DB.DBConfigurationProvider._connectionString">
            Строка подключения к базе данных 
        </member>
        <member name="M:Demo.Configurations.DB.DBConfigurationProvider.#ctor(System.String)">
            Конструктор 
        </member>
        <member name="M:Demo.Configurations.DB.DBConfigurationProvider.Load">
            Загрузка конфигурации из базы данных 
        </member>
        <member name="M:Demo.Configurations.DB.DBConfigurationSource.#ctor(System.String)">
            Строка подключения к базе данных 
        </member>
        <member name="T:Demo.Controllers.AuthorsController">
            <summary>
            Контроллер авторов
            </summary>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.#ctor(Demo.LongPollingQuery{Demo.Model.Author},Demo.Model.DemoContext,Demo.Model.DemoRepository,System.Net.Http.IHttpClientFactory)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.TestTrace">
            <summary>
            Тестовая функция с получением данных из "другого" микросервиса, с авторизацией
            </summary>        
        </member>
        <member name="M:Demo.Controllers.AuthorsController.GetAllAuthors">
            <summary>
            Получение всех авторов
            </summary>        
        </member>
        <member name="M:Demo.Controllers.AuthorsController.GetAuthorById(System.Int32)">
            <summary>
            Получить автора по уникальному идентификатору
            </summary>
            <param name="id"></param>
            <returns></returns>
            <example>GET api/Authors/1</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.GetBook(System.Int32,System.String)">
            <summary>
            Получение книг по уникальному идентификатору и названию
            </summary>
            <param name="id"></param>
            <param name="title"></param>
            <returns></returns>
            <example>GET api/Authors/1/Book/Первая книга Васи</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.GetChanges(System.String)">
            <summary>
            Метод чтения реализующий паттерн LongPolling
            </summary>
            <param name="marker">маркер после которого происходит чтение данных из очереди</param>
            <returns>коллекция результат</returns>
            <example>GET api/Authors/GetChanges/</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.CreateAuthor(Demo.Model.Author)">
            <summary>
            Создание нового автора
            </summary>
            <param name="author">новый автор</param>
            <example>POST api/Authors</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.UpdateAuthor(Demo.Model.Author)">
            <summary>
            Изменение автора
            </summary>        
            <param name="author"></param>
            <example>PUT api/Authors</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.DeleteAuthor(System.Int32)">
            <summary>
            Удаление автора
            </summary>
            <param name="id"></param>
            <example>DELETE api/Authors/1</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.UpsertAuthor(Demo.Model.Author)">
            <summary>
            Создание нового автора
            </summary>
            <param name="author">новый автор</param>
            <example>POST api/Authors</example>
        </member>
        <member name="M:Demo.Controllers.AuthorsController.TestDate(System.DateTime)">
            <summary>
            Тестовая функция с получением данных из "другого" микросервиса, с авторизацией
            </summary>        
        </member>
        <member name="T:Demo.Controllers.PublisherController">
            <summary>
            Контроллер издателей
            </summary>
        </member>
        <member name="M:Demo.Controllers.PublisherController.#ctor(Demo.Model.DemoContext,System.Net.Http.IHttpClientFactory)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:Demo.Controllers.PublisherController.GetAllPublishers">
            <summary>
            Получение всех издателей
            </summary>        
        </member>
        <member name="M:Demo.Controllers.PublisherController.GetPublisherById(System.Int32)">
            <summary>
            Получить издателя по уникальному идентификатору
            </summary>
            <param name="id"></param>
            <returns></returns>
            <example>GET api/Authors/1</example>
        </member>
        <member name="M:Demo.Controllers.PublisherController.GetAuthor(System.Int32)">
            <summary>
            Получение авторов по уникальному идентификатору издателя
            </summary>
            <param name="id"></param>
            <returns></returns>
            <example>GET api/Publisher/1/Author</example>
        </member>
        <member name="M:Demo.Controllers.PublisherController.CreatePublisher(Demo.Model.Publisher)">
            <summary>
            Создание нового издательства
            </summary>
            <param name="publisher">новый издательство</param>
            <example>POST api/Authors</example>
        </member>
        <member name="M:Demo.Controllers.PublisherController.AddAuthor(System.Int32,System.Int32)">
            <summary>
            Добавление Автора к издателю
            </summary>
            <param name="id">Уникальный идентификатор издателя</param>
            <param name="authorId">Уникальный идентификатор автора</param>
            <example>POST api/Authors</example>
        </member>
        <member name="M:Demo.Controllers.PublisherController.UpdatePublisher(Demo.Model.Publisher)">
            <summary>
            Изменение автора
            </summary>        
            <param name="publisher">издатель</param>
            <example>PUT api/Publisher</example>
        </member>
        <member name="M:Demo.Controllers.PublisherController.DeletePublisher(System.Int32)">
            <summary>
            Удаление издателя
            </summary>
            <param name="id"></param>
            <example>DELETE api/Publisher/1</example>
        </member>
        <member name="T:Demo.Model.DemoContext">
            
        </member>
        <member name="M:Demo.Model.DemoContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Констрктор DemoContext
            </summary>
            <param name="o">свойства контекста</param>
        </member>
        <member name="P:Demo.Model.DemoContext.Authors">
            Авторы 
        </member>
        <member name="P:Demo.Model.DemoContext.Books">
            Книги 
        </member>
        <member name="P:Demo.Model.DemoContext.Publishers">
            Издательства 
        </member>
        <member name="P:Demo.Model.DemoContext.BookDetails">
            Дополнительная информация по книге 
        </member>
        <member name="P:Demo.Model.DemoContext.PublishersAuthors">
            Связь многие ко многим между Издателями и Авторами 
        </member>
        <member name="M:Demo.Model.DemoContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Настройка свойств модели
            </summary>        
        </member>
        <member name="T:Demo.Model.DemoRepository">
            Демо репозиторий 
        </member>
        <member name="M:Demo.Model.DemoRepository.#ctor(Demo.Model.DemoContext)">
            Конструктор 
        </member>
        <member name="M:Demo.Model.DemoRepository.Get(System.Int32)">
            <summary>
            Получить автора по иникальному идентификатору
            </summary>
            <param name="id">Уникальный идентификатор</param>
            <returns></returns>
        </member>
        <member name="M:Demo.Model.DemoRepository.Update(Demo.Model.Author)">
            <summary>
            Обновить автора
            </summary>
            <param name="author">автор для обновления</param>
        </member>
        <member name="T:Demo.Model.Author">
            <summary>
            Автор
            </summary>
        </member>
        <member name="P:Demo.Model.Author.Id">
            Уникальный идентификатор 
        </member>
        <member name="P:Demo.Model.Author.Name">
            Имя автора 
        </member>
        <member name="P:Demo.Model.Author.Books">
            Книги автора 
        </member>
        <member name="P:Demo.Model.Author.Publishers">
            Издательства 
        </member>
        <member name="P:Demo.Model.Author.PublishersAuthors">
            Связь многие ко многим Издатели/Авторы 
        </member>
        <member name="T:Demo.Model.Book">
            Книга 
        </member>
        <member name="P:Demo.Model.Book.Id">
            Уникальный идентификатор 
        </member>
        <member name="P:Demo.Model.Book.Title">
            Название книги 
        </member>
        <member name="P:Demo.Model.Book.Description">
            Описание книги 
        </member>
        <member name="P:Demo.Model.Book.ImageUrl">
            Обложка 
        </member>
        <member name="P:Demo.Model.Book.AuthorId">
            Уникльный идентификатор автора 
        </member>
        <member name="P:Demo.Model.Book.Author">
            Автор 
        </member>
        <member name="P:Demo.Model.Book.ISBN_10">
            Идентификатор ISBN10 
        </member>
        <member name="P:Demo.Model.Book.ISBN_13">
            Идентификатор ISBN13 
        </member>
        <member name="P:Demo.Model.Book.Details">
            Дополнительная информация по книге 
        </member>
        <member name="T:Demo.Model.StatusEnum">
            Статус книги 
        </member>
        <member name="F:Demo.Model.StatusEnum.complite">
            Книга завершена 
        </member>
        <member name="F:Demo.Model.StatusEnum.write">
            Книга пишется 
        </member>
        <member name="T:Demo.Model.LanguageEnum">
            Язык 
        </member>
        <member name="F:Demo.Model.LanguageEnum.ru">
            Русский 
        </member>
        <member name="F:Demo.Model.LanguageEnum.en">
            Английский 
        </member>
        <member name="T:Demo.Model.GenreEnum">
            Жанр книги 
        </member>
        <member name="F:Demo.Model.GenreEnum.fantastic">
            Фантастика 
        </member>
        <member name="F:Demo.Model.GenreEnum.fantasy">
            Фантази 
        </member>
        <member name="F:Demo.Model.GenreEnum.litrpg">
            litRPG 
        </member>
        <member name="F:Demo.Model.GenreEnum.scientific">
            Научная литература 
        </member>
        <member name="F:Demo.Model.GenreEnum.historical">
            Историческая литература 
        </member>
        <member name="T:Demo.Model.BookDetails">
             Дополнительная информация по книге 
        </member>
        <member name="P:Demo.Model.BookDetails.BookId">
            Уникальный идентификатор 
        </member>
        <member name="P:Demo.Model.BookDetails.Book">
            Книга 
        </member>
        <member name="P:Demo.Model.BookDetails.Rank">
            Ранк книги 
        </member>
        <member name="P:Demo.Model.BookDetails.Status">
            Статус книги 
        </member>
        <member name="P:Demo.Model.BookDetails.PeperbackCost">
            Стоимость книги в мягком переплёте 
        </member>
        <member name="P:Demo.Model.BookDetails.HardcoverCost">
            Стоимость книги в твёрдом переплёте 
        </member>
        <member name="P:Demo.Model.BookDetails.Year">
            Дата выпуска 
        </member>
        <member name="P:Demo.Model.BookDetails.Editor">
            Редакция 
        </member>
        <member name="P:Demo.Model.BookDetails.Illustrator">
            иллюстратор 
        </member>
        <member name="P:Demo.Model.BookDetails.PageCount">
            Колличество страниц 
        </member>
        <member name="P:Demo.Model.BookDetails.Language">
            Язык 
        </member>
        <member name="P:Demo.Model.BookDetails.ReadingAge">
            Возростные ограничения 
        </member>
        <member name="P:Demo.Model.BookDetails.Genre">
            Жанр 
        </member>
        <member name="P:Demo.Model.BookDetails.Reviews">
            Отзывы 
        </member>
        <member name="T:Demo.Model.Publisher">
            <summary>
            Издатель
            </summary>
        </member>
        <member name="P:Demo.Model.Publisher.Id">
            Уникальный идентификатор 
        </member>
        <member name="P:Demo.Model.Publisher.Name">
            Название издателя 
        </member>
        <member name="P:Demo.Model.Publisher.Authors">
            Авторы 
        </member>
        <member name="P:Demo.Model.Publisher.PublishersAuthors">
            Связь многие ко многим Издатели/Авторы 
        </member>
        <member name="T:Demo.Filters.ExceptionFilter">
            <summary>
            Фильтр ошибок
            </summary>
        </member>
        <member name="M:Demo.Filters.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Обработчик фильтра ошибок
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Demo.GraphQl.Mutation">
            <summary>
            Изменения GraphQL
            Главное отличие в том что подзапросы выполняются последовательно, в том же порядке что указано в запросе
            </summary>
        </member>
        <member name="M:Demo.GraphQl.Mutation.Create(Demo.Model.Author,Demo.Model.DemoContext)">
            <summary>
            Создание автора
            </summary>
            <param name="author">Создаваемый автор</param>
            <param name="ctx">Контекст базы данных Entity</param>
            <returns>Автор</returns>        
        </member>
        <member name="M:Demo.GraphQl.Mutation.Update(Demo.Model.Author,Demo.Model.DemoContext)">
            <summary>
            Обновление автора
            </summary>
            <param name="author">Обновляемый автор</param>
            <param name="ctx">Контекст базы данных Entity</param>
            <returns>Автор</returns>        
        </member>
        <member name="M:Demo.GraphQl.Mutation.Delete(System.Int32,Demo.Model.DemoContext)">
            <summary>
            Удаление автора
            </summary>
            <param name="id">Уникальный идентификатор автора</param>        
            <param name="ctx">Контекст базы данных Entity</param>
            <returns>Автор</returns>        
        </member>
        <member name="M:Demo.GraphQl.Mutation.CreateOrUpdate(Demo.Model.Author,Demo.Model.DemoContext,HotChocolate.Subscriptions.ITopicEventSender)">
            <summary>
            Создать или обновить автора тут логика такая, если Id равен 0, то это однозначно новый автор
            </summary>
            <param name="ctx">Контекст базы данных Entity</param>
            <param name="author">Создать или обновить автора</param>
            <param name="sender"></param>
            <returns>Автор</returns>        
        </member>
        <member name="M:Demo.GraphQl.Mutation.ThrowError">
            <summary>
            Генерация ошибки для проверки транзакции
            </summary>      
            <returns>Автор</returns>        
        </member>
        <member name="M:Demo.GraphQl.Mutation.TestDateTime(System.DateTime)">
            <summary>
            Проверка даты
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Demo.GraphQl.Query">
            <summary>
            Запросы GraphQl
            Главное отличик запроса в том что его подзапросы выполняются параллельно
            </summary>
        </member>
        <member name="M:Demo.GraphQl.Query.#ctor(Microsoft.Extensions.Logging.ILogger{Demo.GraphQl.Query},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:Demo.GraphQl.Query.V1">
            <summary>
            Возвращает первую версию
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo.GraphQl.Query.MyLogicPaginAuthors(System.String,System.Nullable{System.Int32},System.String,Demo.Model.DemoContext)">
            <summary>
            
            </summary>
            <param name="after"></param>
            <param name="first"></param>
            <param name="sortBy"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.GraphQl.Query.Authors(Demo.Model.DemoContext)">
            <summary>
            Запрос чтения
            </summary>
            <param name="ctx">Контекст базы данных Entity</param>            
            <returns>Авторы</returns>        
        </member>
        <member name="M:Demo.GraphQl.Query.AuthorsByIds(Demo.Model.DemoContext,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Чтение по уникальным идентификаторам, это функция по факту не нужна, легко заменяется функцией Authors с фильтром
            </summary>
            <param name="ctx"></param>
            <param name="ids"></param>
            <returns>Авторы</returns>           
        </member>
        <member name="M:Demo.GraphQl.Query.AuthorById(Demo.Model.DemoContext,System.Int32)">
            <summary>
            Получить автора по иникальному идентификатору
            </summary>
            <param name="ctx">Контекст базы данных</param>
            <param name="id">Уникальный идентификатор книги</param>
            <returns>Автор книги</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Demo.GraphQl.Query.Books(Demo.Model.DemoContext)">
            <summary>
            Запрос получения книг
            </summary>
            <param name="ctx">Контекст базы данных Entity</param>
            <returns>Книги</returns>
        </member>
        <member name="M:Demo.GraphQl.Query.AuthorizeQuery(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Тестовая функция с авторизацией
            </summary>
            <param name="claimsPrincipal"></param>
            <returns></returns>
        </member>
        <member name="M:Demo.GraphQl.Query.TestConfigurationDirectly">
            Проверяем конфигурацию на прямую 
        </member>
        <member name="M:Demo.GraphQl.Query.TestConfigurationJSON">
            Проверяем конфигурацию из JSON 
        </member>
        <member name="M:Demo.GraphQl.Query.TestConfigurationYaml">
            Проверяем работу значений из YAML файла 
        </member>
        <member name="M:Demo.GraphQl.Query.TestConfigurationXML">
            Проверяем конфигурацию из xml 
        </member>
        <member name="M:Demo.GraphQl.Query.TestOptions(Microsoft.Extensions.Options.IOptions{Demo.OAUTHSettings})">
            Проверяем простейшие опции 
        </member>
        <member name="M:Demo.GraphQl.Query.TestOptionsSnapshot(Microsoft.Extensions.Options.IOptionsSnapshot{Demo.OAUTHSettings})">
            Проверяем простейшие опции снимка 
        </member>
        <member name="M:Demo.GraphQl.Query.TestOptionsMonitor(Microsoft.Extensions.Options.IOptionsMonitor{Demo.OAUTHSettings})">
             Проверяем работу опций типа монитор 
        </member>
        <member name="M:Demo.GraphQl.Query.TestConfigurationDynamic">
            Проверяем работу динамических значений 
        </member>
        <member name="M:Demo.GraphQl.Query.TestConfigurationDB">
            Проверяем работу значений из базы данных 
        </member>
        <member name="M:Demo.GraphQl.Api1.Authors(Demo.Model.DemoContext)">
            <summary>
            Запрос чтения
            </summary>
            <param name="ctx">Контекст базы данных Entity</param>            
            <returns>Авторы</returns>        
        </member>
        <member name="T:Demo.GraphQl.Subscription">
            <summary>
            Подписки
            </summary>
        </member>
        <member name="M:Demo.GraphQl.Subscription.OnAuthorChanged(Demo.Model.Author)">
            <summary>
            Добавлен новый автор
            </summary>
            <param name="author"></param>
            <returns>Автор</returns>
        </member>
        <member name="T:Demo.Health.CustumHealthCheck">
            <summary>
            Кастомная провека работоспособности
            </summary>
        </member>
        <member name="M:Demo.Health.CustumHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            Фукнция проверки
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Demo.HttpHandler.HttpTrackerHandler">
            <summary>
            Передача аргументов запроса в вызов
            </summary>
        </member>
        <member name="M:Demo.HttpHandler.HttpTrackerHandler.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            Конструктор 
        </member>
        <member name="M:Demo.HttpHandler.HttpTrackerHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            Асинхронный метод вызова 
        </member>
        <member name="T:Demo.LongPollingValue`1">
            <summary>
            Значение очереди
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="P:Demo.LongPollingValue`1.Value">
            <summary>
            Текущие занчение
            </summary>
        </member>
        <member name="P:Demo.LongPollingValue`1.Marker">
            <summary>
            Маркер по котором считываем новые значения
            </summary>
        </member>
        <member name="P:Demo.LongPollingValue`1.Next">
            <summary>
            Следующий элемент в связанном списке
            </summary>
        </member>
        <member name="T:Demo.LongPollingQuery`1">
            <summary>
            Очередь реализующаю паттерн LongPolling ( "Длительный Опрос" )
            </summary>
            <typeparam name="T">generetic тип очереди</typeparam>
        </member>
        <member name="P:Demo.LongPollingQuery`1.TimeOut">
            <summary>
            Максимальное время удержания запроса, когда нет подходящих данных
            </summary>
        </member>
        <member name="P:Demo.LongPollingQuery`1.WatchDogTimeOut">
            <summary>
            Время устаревания данных в очереди
            </summary>
        </member>
        <member name="M:Demo.LongPollingQuery`1.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:Demo.LongPollingQuery`1.Add(`0)">
            <summary>
            Добавление в очередь
            </summary>        
        </member>
        <member name="M:Demo.LongPollingQuery`1.Read(System.DateTime)">
            <summary>
            Чтение из очереди
            </summary>
            <param name="marker">маркер после которого происходит чтение данных из очереди</param>        
            <returns></returns>
        </member>
        <member name="T:Demo.Program">
            
        </member>
        <member name="M:Demo.Program.Main(System.String[])">
            
        </member>
        <member name="M:Demo.Program.CreateHostBuilder(System.String[])">
            
        </member>
        <member name="M:Demo.DateTimeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext)">
            <inheritdoc />
        </member>
        <member name="T:Demo.SettingsWatchdog">
            Отслеживание изменения конфигурации 
        </member>
        <member name="T:Demo.Startup">
            *
        </member>
        <member name="P:Demo.Startup.Configuration">
            Конфигурация *
        </member>
        <member name="M:Demo.Startup.WriteHealthCheckResponse(Microsoft.AspNetCore.Http.HttpContext,Microsoft.Extensions.Diagnostics.HealthChecks.HealthReport)">
            Функция записи результата проверки работоспособности 
        </member>
        <member name="M:Demo.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            *
        </member>
        <member name="M:Demo.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            Конфигурация сервисов *
        </member>
        <member name="M:Demo.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Demo.SettingsWatchdog)">
            Конфигурация midlware *
        </member>
    </members>
</doc>
